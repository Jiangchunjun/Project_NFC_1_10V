###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.1.11864/W32 for ARM       15/Apr/2019  16:02:28
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\XMC_Peripheral_Library\XMCLib\src\xmc_rtc.c
#    Command line =  
#        "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\XMC_Peripheral_Library\XMCLib\src\xmc_rtc.c"
#        -D XMC1301_T038x0064 -D OT_NFC_IP67_200W -D NDEBUG -D ENABLT_WDT -D
#        ENABLE_COMM -D ENABLE_USART -D nDEBUG_PRINT -D nDEBUG_VERSION -D
#        MODULE_I2C -D MODULE_M24LRxx -D MODULE_NFC -D MODULE_NFC_DALI -D
#        ENASTRO -D NO_FAST_TIME_ASTRO -D NO_EN_CLM_TIME_FAST -D ENABLE_OVP -D
#        ENABLE_MOBILE -D ENABLE_ONE2TEN -D BYTEORDER_LITTLE_ENDIAN -D
#        AVAILABLE_PORTS_NUMBER=3 -D FW_HIGH=01 -D FW_LOW=02 -D ENASTRO -D
#        MPC_O2T_DEFAULT_SETTINGS -D MPC_O2T_DEFAULT_BOUNDARIES -lc "C:\C
#        Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\output\200W\List" -o "C:\C
#        Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\output\200W\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M0 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\IAR ARM
#        7.8\arm\INC\c\DLib_Config_Normal.h" -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\XMC_Peripheral_Library\XMCLib\inc\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\XMC_Peripheral_Library\CMSIS\Infineon\XMC1300_series\Include\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\XMC_Peripheral_Library\CMSIS\Include\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\inc\" -I
#        "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Driver\inc\" -I "C:\C
#        Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Import\Config\devices\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Import\Config\" -I "C:\C
#        Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Import\driver_ot\" -I
#        "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Import\modules\CRC\api\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Import\modules\CRC\driver_api\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Import\modules\fileTank\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Import\modules\I2cExt\api\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Import\modules\I2cExt\driver_api\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Import\modules\NfcExt\api\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Import\modules\NfcExt\M24LRxx\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\NVM\"
#        -I PROJ_DIR$\..\Application\src\modules\NVM\api\ -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\NVM\driver_api\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\NVM\driver_xmc1300\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\CRC\api\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\CRC\driver_api\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\currentset\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\supplymonitor\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\Dali\DaliServices\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\Dali\HW\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\Dali\iFace\Modules\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\Dali\iFace\Optional\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\Dali\iFace\Services\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\MPC\Acl\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\MPC\Alloc\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\MPC\Alloc\Legacy\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\MPC\Clm\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\MPC\Csm\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\MPC\Info\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\MPC\MSK\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\MPC\O2T\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\MPC\AstroDim\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\MPC\MSKEncryption\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\MPC\Power\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\MPC\EOL\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\NFC\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\I2C\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\XMCLib\XMCLib\inc\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\XMCLib\CMSIS\Include\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\XMCLib\CMSIS\Infineon\XMC1300_series\Include\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\CRC16\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\hwdrivers\XMC1300\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\NVM\api\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\supplymonitor\"
#        -Ol
#    Locale       =  Chinese (Simplified)_CHN.936
#    List file    =  
#        C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\output\200W\List\xmc_rtc.lst
#    Object file  =  
#        C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\output\200W\Obj\xmc_rtc.o
#
###############################################################################

C:\C Pan\work\NFC 1-10\NFC2_1_10V\Project_NFC_1_10V\XMC_Peripheral_Library\XMCLib\src\xmc_rtc.c
      1          /**
      2           * @file xmc_rtc.c
      3           * @date 2015-06-20
      4           *
      5           * @cond
      6           *********************************************************************************************************************
      7           * XMClib v2.1.6 - XMC Peripheral Driver Library 
      8           *
      9           * Copyright (c) 2015-2016, Infineon Technologies AG
     10           * All rights reserved.                        
     11           *                                             
     12           * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the 
     13           * following conditions are met:   
     14           *                                                                              
     15           * Redistributions of source code must retain the above copyright notice, this list of conditions and the following 
     16           * disclaimer.                        
     17           * 
     18           * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following 
     19           * disclaimer in the documentation and/or other materials provided with the distribution.                       
     20           * 
     21           * Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote 
     22           * products derived from this software without specific prior written permission.                                           
     23           *                                                                              
     24           * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
     25           * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  
     26           * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
     27           * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR  
     28           * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
     29           * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
     30           * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                                                  
     31           *                                                                              
     32           * To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes with 
     33           * Infineon Technologies AG dave@infineon.com).                                                          
     34           *********************************************************************************************************************
     35           *
     36           * Change History
     37           * --------------
     38           *
     39           * 2015-02-20:
     40           *     - Initial <br>
     41           *      
     42           * 2015-06-20:
     43           *     - Removed GetDriverVersion API
     44           * @endcond 
     45           *
     46           */
     47          
     48          /**
     49           *
     50           * @brief RTC driver for XMC microcontroller family.
     51           *
     52           */
     53          
     54          /*********************************************************************************************************************
     55           * HEADER FILES
     56           *********************************************************************************************************************/
     57           
     58          #include "xmc_scu.h"
     59          #include "xmc_rtc.h"
     60          
     61          /*********************************************************************************************************************
     62           * MACROS
     63           *********************************************************************************************************************/
     64          
     65          #define XMC_RTC_MAXSECONDS  (59U)   /**< RTC time : Maximum seconds */
     66          #define XMC_RTC_MAXMINUTES  (59U)   /**< RTC time : Maximum minutes */
     67          #define XMC_RTC_MAXHOURS    (23U)   /**< RTC time : Maximum hours */
     68          #define XMC_RTC_MAXDAYS     (31U)   /**< RTC time : Maximum days */
     69          #define XMC_RTC_MAXDAYSOFWEEK  (7U) /**< RTC time : Maximum days of week */
     70          #define XMC_RTC_MAXMONTH  (12U)     /**< RTC time : Maximum month */
     71          #define XMC_RTC_MAXYEAR  (0xFFFFU)  /**< RTC time : Maximum year */
     72          #define XMC_RTC_MAXPRESCALER  (0xFFFFU)  /**< RTC time : Maximum prescaler */
     73          #define XMC_RTC_YEAR_OFFSET (1900U)      /**< RTC year offset : Year offset */
     74          
     75          #if (UC_FAMILY == XMC4)
     76          #define XMC_RTC_INIT_SEQUENCE  (1U)
     77          #endif
     78          #if (UC_FAMILY == XMC1)
     79          #define XMC_RTC_INIT_SEQUENCE  (0U)
     80          #endif
     81          
     82          /*********************************************************************************************************************
     83           * API IMPLEMENTATION
     84           *********************************************************************************************************************/
     85          
     86          /*
     87           * Enables RTC peripheral to start counting time
     88           */
     89          void XMC_RTC_Start(void)
     90          {
     91            while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
     92            {
     93              /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
     94            }
     95            RTC->CTR |= (uint32_t)RTC_CTR_ENB_Msk;
     96          }
     97          
     98          /*
     99           * Disables RTC peripheral to start counting time
    100           */
    101          void XMC_RTC_Stop(void)
    102          {
    103            while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
    104            {
    105              /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    106            }
    107            RTC->CTR &= ~(uint32_t)RTC_CTR_ENB_Msk;
    108          }
    109          
    110          /*
    111           * Sets the RTC module prescaler value
    112           */
    113          void XMC_RTC_SetPrescaler(uint16_t prescaler)
    114          {
    115            XMC_ASSERT("XMC_RTC_SetPrescaler:Wrong prescaler value", (prescaler < XMC_RTC_MAXPRESCALER));
    116            
    117            while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
    118            {
    119              /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    120            }
    121            RTC->CTR = (RTC->CTR & ~(uint32_t)RTC_CTR_DIV_Msk) |
    122                       ((uint32_t)prescaler << (uint32_t)RTC_CTR_DIV_Pos);
    123          }
    124          
    125          /*
    126           * Sets the RTC_TIM0, RTC_TIM1 registers with time values
    127           */
    128          void XMC_RTC_SetTime(const XMC_RTC_TIME_t *const time)
    129          {
    130            XMC_ASSERT("XMC_RTC_SetTime:Wrong seconds value", ((uint32_t)time->seconds < XMC_RTC_MAXSECONDS));
    131            XMC_ASSERT("XMC_RTC_SetTime:Wrong minutes value", ((uint32_t)time->minutes < XMC_RTC_MAXMINUTES));
    132            XMC_ASSERT("XMC_RTC_SetTime:Wrong hours value", ((uint32_t)time->hours < XMC_RTC_MAXHOURS));
    133            XMC_ASSERT("XMC_RTC_SetTime:Wrong month day value", ((uint32_t)time->days < XMC_RTC_MAXDAYS));
    134            XMC_ASSERT("XMC_RTC_SetTime:Wrong week day value", ((uint32_t)time->daysofweek < XMC_RTC_MAXDAYSOFWEEK));
    135            XMC_ASSERT("XMC_RTC_SetTime:Wrong month value", ((uint32_t)time->month < XMC_RTC_MAXMONTH));
    136            XMC_ASSERT("XMC_RTC_SetTime:Wrong year value", ((uint32_t)time->year < XMC_RTC_MAXYEAR));
    137          
    138            #if (XMC_RTC_INIT_SEQUENCE == 1U)
    139                while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM0_Msk) != 0U)
    140                { 
    141                   /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    142                }
    143                RTC->TIM0 = time->raw0;
    144                
    145                while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM1_Msk) != 0U)
    146                {
    147                  /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    148                }
    149                RTC->TIM1 = time->raw1;	     
    150            #endif
    151            #if (XMC_RTC_INIT_SEQUENCE == 0U)
    152                while ((XMC_SCU_GetMirrorStatus() & (SCU_GENERAL_MIRRSTS_RTC_TIM0_Msk | SCU_GENERAL_MIRRSTS_RTC_TIM1_Msk)) != 0U)
    153                {
    154                  /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    155                }
    156                RTC->TIM0 = time->raw0;
    157                RTC->TIM1 = time->raw1;	; 
    158            #endif  
    159          }
    160          
    161          /*
    162           * Gets the RTC module time value
    163           */
    164          void XMC_RTC_GetTime(XMC_RTC_TIME_t *const time)
    165          {
    166            time->raw0 = RTC->TIM0;
    167            time->raw1 = RTC->TIM1;
    168          }
    169          
    170          /*
    171           * Gets the RTC module time values in standard format
    172           */
    173          void XMC_RTC_GetTimeStdFormat(struct tm *const stdtime)
    174          {
    175            XMC_RTC_TIME_t time;
    176            time.raw0 = RTC->TIM0;
    177            time.raw1 = RTC->TIM1;
    178            
    179            stdtime->tm_sec = (int8_t)time.seconds;
    180            stdtime->tm_min = (int8_t)time.minutes;
    181            stdtime->tm_hour = (int8_t)time.hours;
    182            stdtime->tm_mday = ((int8_t)time.days + (int8_t)1);
    183            stdtime->tm_mon = (int8_t)time.month;
    184            stdtime->tm_year = (int32_t)time.year - (int32_t)XMC_RTC_YEAR_OFFSET;
    185            stdtime->tm_wday = (int8_t)time.daysofweek;
    186          }
    187          
    188          /*
    189           * Sets the RTC module alarm time value
    190           */
    191          void XMC_RTC_SetAlarm(const XMC_RTC_ALARM_t *const alarm)
    192          {
    193            XMC_ASSERT("XMC_RTC_SetAlarm:Wrong seconds value", ((uint32_t)alarm->seconds < XMC_RTC_MAXSECONDS));
    194            XMC_ASSERT("XMC_RTC_SetAlarm:Wrong minutes value", ((uint32_t)alarm->minutes < XMC_RTC_MAXMINUTES));
    195            XMC_ASSERT("XMC_RTC_SetAlarm:Wrong hours value", ((uint32_t)alarm->hours < XMC_RTC_MAXHOURS));
    196            XMC_ASSERT("XMC_RTC_SetAlarm:Wrong days value", ((uint32_t)alarm->days < XMC_RTC_MAXDAYS));
    197            XMC_ASSERT("XMC_RTC_SetAlarm:Wrong month value", ((uint32_t)alarm->month < XMC_RTC_MAXMONTH));
    198            XMC_ASSERT("XMC_RTC_SetAlarm:Wrong year value", ((uint32_t)alarm->year < XMC_RTC_MAXYEAR));
    199          
    200            #if (XMC_RTC_INIT_SEQUENCE == 1U)
    201                while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_ATIM0_Msk) != 0U)
    202                {
    203                  /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    204                }
    205                RTC->ATIM0 = alarm->raw0;
    206                
    207                while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_ATIM1_Msk) != 0U)
    208                {
    209                  /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    210                }
    211                RTC->ATIM1 = alarm->raw1; 
    212            #endif
    213            #if (XMC_RTC_INIT_SEQUENCE == 0U)
    214                while ((XMC_SCU_GetMirrorStatus() & (SCU_GENERAL_MIRRSTS_RTC_ATIM0_Msk | SCU_GENERAL_MIRRSTS_RTC_ATIM1_Msk)) != 0U)
    215                {
    216                  /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    217                }
    218                RTC->ATIM0 = alarm->raw0;
    219                RTC->ATIM1 = alarm->raw1; 
    220            #endif  
    221          }
    222          
    223          /*
    224           * Gets the RTC module alarm time value
    225           */
    226          void XMC_RTC_GetAlarm(XMC_RTC_ALARM_t *const alarm)
    227          {
    228            alarm->raw0 = RTC->ATIM0;
    229            alarm->raw1 = RTC->ATIM1;
    230          }
    231          
    232          
    233          /*
    234           * Gets the RTC module alarm time value in standard format
    235           */
    236          void XMC_RTC_GetAlarmStdFormat(struct tm *const stdtime)
    237          {
    238            XMC_RTC_ALARM_t alarm;
    239            
    240            alarm.raw0 = RTC->ATIM0;
    241            alarm.raw1 = RTC->ATIM1;
    242          
    243            stdtime->tm_sec = (int8_t)alarm.seconds;
    244            stdtime->tm_min = (int8_t)alarm.minutes;
    245            stdtime->tm_hour = (int8_t)alarm.hours;
    246            stdtime->tm_mday = ((int8_t)alarm.days + (int8_t)1);
    247            stdtime->tm_mon = (int8_t)alarm.month;
    248            stdtime->tm_year = (int32_t)alarm.year - (int32_t)XMC_RTC_YEAR_OFFSET;
    249          }
    250          
    251          /*
    252           * Gets the RTC periodic and alarm event(s) status
    253           */
    254          uint32_t XMC_RTC_GetEventStatus(void)
    255          {
    256            return RTC->STSSR;
    257          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   XMC_RTC_GetAlarm
       8   XMC_RTC_GetAlarmStdFormat
       0   XMC_RTC_GetEventStatus
       0   XMC_RTC_GetTime
       8   XMC_RTC_GetTimeStdFormat
       8   XMC_RTC_SetAlarm
         8   -> XMC_SCU_GetMirrorStatus
       8   XMC_RTC_SetPrescaler
         8   -> XMC_SCU_GetMirrorStatus
       8   XMC_RTC_SetTime
         8   -> XMC_SCU_GetMirrorStatus
       8   XMC_RTC_Start
         8   -> XMC_SCU_GetMirrorStatus
       8   XMC_RTC_Stop
         8   -> XMC_SCU_GetMirrorStatus
       0   XMC_SCU_GetMirrorStatus


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
      14  XMC_RTC_GetAlarm
      88  XMC_RTC_GetAlarmStdFormat
       6  XMC_RTC_GetEventStatus
      14  XMC_RTC_GetTime
     100  XMC_RTC_GetTimeStdFormat
      30  XMC_RTC_SetAlarm
      28  XMC_RTC_SetPrescaler
      30  XMC_RTC_SetTime
      24  XMC_RTC_Start
      24  XMC_RTC_Stop
       6  XMC_SCU_GetMirrorStatus

 
 396 bytes in section .text
 
 396 bytes of CODE memory

Errors: none
Warnings: none
