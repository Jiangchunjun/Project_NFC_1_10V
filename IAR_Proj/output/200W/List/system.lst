###############################################################################
#
# IAR ANSI C/C++ Compiler V7.80.1.11864/W32 for ARM       22/Apr/2019  10:37:00
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\Application\src\system.c
#    Command line =  
#        "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\Application\src\system.c" -D
#        XMC1301_T038x0064 -D OT_NFC_IP67_200W -D NDEBUG -D ENABLT_WDT -D
#        ENABLE_COMM -D ENABLE_USART -D nDEBUG_PRINT -D nDEBUG_VERSION -D
#        MODULE_I2C -D MODULE_M24LRxx -D MODULE_NFC -D MODULE_NFC_DALI -D
#        ENASTRO -D NO_FAST_TIME_ASTRO -D NO_EN_CLM_TIME_FAST -D ENABLE_OVP -D
#        ENABLE_MOBILE -D ENABLE_ONE2TEN -D BYTEORDER_LITTLE_ENDIAN -D
#        AVAILABLE_PORTS_NUMBER=3 -D FW_HIGH=01 -D FW_LOW=02 -D ENASTRO -D
#        MPC_O2T_DEFAULT_SETTINGS -D MPC_O2T_DEFAULT_BOUNDARIES -lc "C:\C
#        Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\output\200W\List" -o "C:\C
#        Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\output\200W\Obj" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M0 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\IAR ARM
#        7.8\arm\INC\c\DLib_Config_Normal.h" -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\XMC_Peripheral_Library\XMCLib\inc\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\XMC_Peripheral_Library\CMSIS\Infineon\XMC1300_series\Include\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\XMC_Peripheral_Library\CMSIS\Include\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\inc\" -I
#        "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Driver\inc\" -I "C:\C
#        Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Import\Config\devices\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Import\Config\" -I "C:\C
#        Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Import\driver_ot\" -I
#        "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Import\modules\CRC\api\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Import\modules\CRC\driver_api\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Import\modules\fileTank\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Import\modules\I2cExt\api\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Import\modules\I2cExt\driver_api\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Import\modules\NfcExt\api\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Import\modules\NfcExt\M24LRxx\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\NVM\"
#        -I PROJ_DIR$\..\Application\src\modules\NVM\api\ -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\NVM\driver_api\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\NVM\driver_xmc1300\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\CRC\api\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\CRC\driver_api\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\currentset\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\supplymonitor\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\Dali\DaliServices\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\Dali\HW\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\Dali\iFace\Modules\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\Dali\iFace\Optional\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\Dali\iFace\Services\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\MPC\Acl\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\MPC\Alloc\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\MPC\Alloc\Legacy\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\MPC\Clm\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\MPC\Csm\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\MPC\Info\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\MPC\MSK\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\MPC\O2T\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\MPC\AstroDim\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\MPC\MSKEncryption\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\MPC\Power\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\MPC\EOL\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\NFC\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\I2C\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\XMCLib\XMCLib\inc\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\XMCLib\CMSIS\Include\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\XMCLib\CMSIS\Infineon\XMC1300_series\Include\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\CRC16\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\hwdrivers\XMC1300\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\NVM\api\"
#        -I "C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\..\Application\src\modules\supplymonitor\"
#        -Ol
#    Locale       =  Chinese (Simplified)_CHN.936
#    List file    =  
#        C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\output\200W\List\system.lst
#    Object file  =  
#        C:\C Pan\work\NFC
#        1-10\NFC2_1_10V\Project_NFC_1_10V\IAR_Proj\output\200W\Obj\system.o
#
###############################################################################

C:\C Pan\work\NFC 1-10\NFC2_1_10V\Project_NFC_1_10V\Application\src\system.c
      1          /*
      2          ***************************************************************************************************
      3          *                                  System Task Control Center
      4          *
      5          * File   : system.c
      6          * Author : Douglas Xie
      7          * Date   : 2016.04.18
      8          ***************************************************************************************************
      9          * Copyright (C) 2016 OSRAM Asia Pacific Management Company.  All rights reserved.
     10          ***************************************************************************************************
     11          */
     12          
     13          
     14          /* Include Head Files ---------------------------------------------------------------------------*/
     15          #include "system.h"

  #warning ::::::::::::::::::::::::::: Using original LEDset resistor (wrong for MP) :::::::::::::::::::::::::::
   ^
"C:\C Pan\work\NFC 1-10\NFC2_1_10V\Project_NFC_1_10V\Application\inc\power_config_200w.h",86  Warning[Pe1105]: 
          #warning directive: ::::::::::::::::::::::::::: Using original LEDset
          resistor (wrong for MP) :::::::::::::::::::::::::::

  #warning ::::::::::::::::::::::::::: Using original LEDset resistor (wrong for MP) :::::::::::::::::::::::::::
   ^
"C:\C Pan\work\NFC 1-10\NFC2_1_10V\Project_NFC_1_10V\Application\inc\power_config_200w.h",86  Warning[Pe1105]: 
          #warning directive: ::::::::::::::::::::::::::: Using original LEDset
          resistor (wrong for MP) :::::::::::::::::::::::::::
     16          #include "Nfc.h"
     17          #include "Acl.h"
     18          #include "nvm.h"
     19          /* Macro Defines --------------------------------------------------------------------------------*/
     20          
     21          
     22          /* Private Variable -----------------------------------------------------------------------------*/
     23          volatile uint32_t  g_system_task_state = 0x00000000;  /* System Task state: max 32 tasks */
     24          volatile uint8_t   g_work_mode;        
     25          
     26          
     27          /* Global Variable ------------------------------------------------------------------------------*/
     28          uint8_t g_nfc_ini_flag=0;
     29          
     30          uint8_t g_nfc_tag_read=0;
     31          
     32          /* Function Declaration -------------------------------------------------------------------------*/
     33          
     34          
     35          /* Function Implement ---------------------------------------------------------------------------*/
     36          
     37          /*******************************************************************************
     38          * @brief  System Task Manager Initial
     39          * @param  
     40          * @note   Reset the task state register
     41          * @retval  
     42          *******************************************************************************/
     43          void System_TaskInit(void)
     44          {
     45              g_system_task_state = 0x00000000;
     46          }
     47          
     48          
     49          /*******************************************************************************
     50          * @brief  Create System Task
     51          * @param  
     52          * @note   Set task register bit to enable the task
     53          * @retval  
     54          *******************************************************************************/
     55          void System_CreateTask(uint32_t task_id)
     56          {
     57              g_system_task_state |= task_id;
     58          }
     59          
     60          
     61          /*******************************************************************************
     62          * @brief  Close System Task
     63          * @param  
     64          * @note   Clear task register bit to disable the task
     65          * @retval  
     66          *******************************************************************************/
     67          void System_CloseTask(uint32_t task_id)
     68          {
     69              g_system_task_state &= ~task_id;
     70          }
     71          
     72          
     73          /*******************************************************************************
     74          * @brief  Check Task Enable State
     75          * @param  
     76          * @note   Check System Task Enable State and return it 
     77          * @retval SYS_TASK_ENABLE / SYS_TASK_DISABLE
     78          *******************************************************************************/
     79          uint8_t System_CheckTask(uint32_t task_id)
     80          {
     81              uint8_t byState = SYS_TASK_DISABLE;
     82              
     83              if( g_system_task_state & task_id )
     84              {
     85                  byState = SYS_TASK_ENABLE;
     86              }
     87              
     88              return byState;
     89          }
     90          
     91          
     92          /*******************************************************************************
     93          * @brief  System Power On Task
     94          * @param  
     95          * @note   
     96          * @retval 
     97          *******************************************************************************/
     98          void System_PowerOnTask(void)
     99          {
    100              static uint8_t state = 0;       /* task state */
    101              static uint32_t systick = 0;
    102              extern uint16_t g_one2ten_avg_adc,g_target_current;
    103              extern uint8_t g_nfc_tag_read;
    104              /* Check if task has been created */
    105                  
    106              if( System_CheckTask(SYS_TASK_POWER_ON) == SYS_TASK_DISABLE )
    107              {
    108                  return;
    109              }
    110              /* Get current system tick counter */
    111              systick = Tick_GetTicks();
    112              
    113              /* Power task state machine */
    114              switch(state)
    115              {
    116                  /* state of delay for initial ACMP */
    117              case POWER_ON_STATE_ACMP_EN: 
    118                  /* Check delay for enable ACMP */
    119                  if(systick >= SYS_ACMP_EN_DELAY)
    120                  {
    121                      /* enable acmp for detect OVP & OCP */
    122                      ACMP_EnableOVP();
    123                      //            ACMP_EnableOCP();
    124                      
    125                      /* Disable control pwm accelerate pin to avoid shoot current */
    126                      PWM_CtrlAccelerateDisable();
    127                      
    128                      /* swtich to next state */
    129                      state++;
    130                  }
    131                  break;   
    132                  
    133                  /* state of delay for enable ERU interrupt */
    134              case POWER_ON_STATE_ERU_EN:
    135                  /* Check delay for enable ERU */
    136                  if(systick >= SYS_ERU_EN_DELAY)
    137                  {       
    138          #ifdef ENABLE_OVP
    139                      /* enable eru for trigger OVP protection */
    140                     ERU_EnableOVP();
    141                     ACMP_EnableLevelEvent_OVP();
    142          #endif
    143                      
    144                      /* enable eru for trigger OCP protection */
    145                      //ERU_EnableOCP();
    146                      
    147                      /* swtich to next state */
    148                      state++;
    149                  }
    150                  break;
    151                  
    152                  /* state of delay for NFC task init and prepare OVP OCP reference */
    153              case POWER_ON_STATE_NFC_INIT:
    154                  /* Check delay for NFC task init */
    155                        g_one2ten_avg_adc = ADC_GetAverage(ADC_CHANNEL_DIM);
    156                  if(g_one2ten_avg_adc<ONE_TEN_LOW_VOLTAGE)
    157                      g_one2ten_avg_adc=ONE_TEN_LOW_VOLTAGE;
    158                  if(g_one2ten_avg_adc>ONE_TEN_HIGH_VOLTAGE)
    159                      g_one2ten_avg_adc=ONE_TEN_HIGH_VOLTAGE; 
    160                    //g_one2ten_avg_adc=ONE_TEN_LOW_VOLTAGE;//Add Moon
    161                  //Power_UpdateOne2TenDimming(g_one2ten_avg_adc);
    162                  if(systick >= SYS_NFC_INIT_DELYA)
    163                  {            
    164                      /* read target current and prepare reference */
    165                      //Power_PrepareReference();
    166                      
    167                      /* Power on NFC tag */
    168                      MCU_NfcPowerPinSet();
    169                      
    170               
    171                      /* Create nfc communication task */
    172                      //System_CreateTask(SYS_TASK_NFC);  
    173                      
    174                      /* swtich to next state */
    175                      state++;            
    176                  }
    177                  break;
    178                  
    179                  /* state of delay for set current init pwm duty */
    180              case POWER_ON_STATE_POWER_INIT:
    181                  /* Check delay for read NFC config */
    182                        g_one2ten_avg_adc = ADC_GetAverage(ADC_CHANNEL_DIM);
    183                  if(g_one2ten_avg_adc<ONE_TEN_LOW_VOLTAGE)
    184                      g_one2ten_avg_adc=ONE_TEN_LOW_VOLTAGE;
    185                  if(g_one2ten_avg_adc>ONE_TEN_HIGH_VOLTAGE)
    186                      g_one2ten_avg_adc=ONE_TEN_HIGH_VOLTAGE; 
    187                    //g_one2ten_avg_adc=ONE_TEN_LOW_VOLTAGE;//Add Moon
    188                //Power_UpdateOne2TenDimming(g_one2ten_avg_adc);
    189                  if(systick >= SYS_POWER_INIT_DELYA)
    190                  {
    191                      /* Power control loop task init */
    192                     Power_TaskInit();
    193                     
    194                            /* nfc task init */
    195                      nvmInit();
    196                      
    197                      NfcInit();
    198                      
    199                      AclInit();
    200                      
    201                      
    202                      DaliBallast_Init(); 
                             ^
Warning[Pe223]: function "DaliBallast_Init" declared implicitly
    203                      
    204                      //nfc_ed_record(); 
    205                      
    206          //            while(nfc_time_id()==0)
    207          //            {
    208          //              I2cCyclic();
    209          //              NfcWatchdogResetRequest();
    210          //            }
    211                      
    212                      //System_CreateTask(SYS_TASK_NFC_HANDLE);
    213                      SWT_StartTimer(SWT_ID_NFC_HANDLE, 1);
    214                      
    215                      /* swtich to next state */
    216                      
    217                      
    218                      g_nfc_ini_flag=1;
    219                      
    220                      if(g_nfc_tag_read==1)
    221                      {
    222                        g_nfc_tag_read=2;
    223                      }
    224                      
    225                      state++;            
    226                  }
    227                  break;
    228                  
    229                  /* state of delay for initial ADC and calibrate ADC */
    230              case POWER_ON_STATE_ADC_INIT:
    231                  /* Check delay for enable ADC */
    232                  if(systick >= SYS_ADC_INIT_DELYA)
    233                  {           
    234                      /* enable ADC again for output current and voltage monitor */
    235                      ADC_Enable();
    236                      
    237                      /* swtich to next state */
    238                      state++;            
    239                  }
    240                  break;
    241                  
    242                  /* state of delay for start control loop */
    243              case POWER_ON_STATE_LOOP_START:
    244                  /* Check delay for create control loop task */
    245                  if(systick >= SYS_CTRL_LOOP_START_DELAY)
    246                  {           
    247                      /* Create power control loop task */
    248                    
    249                    if(g_nfc_tag_read==4)
    250                    {
    251                      g_target_current=MemoryBank_CSM_GetNominalCurrent(0);
                                              ^
Warning[Pe223]: function "MemoryBank_CSM_GetNominalCurrent" declared implicitly
    252                      Power_SetCurrent(g_target_current, SET_MODE_POWER_ON);
    253                      System_CreateTask(SYS_TASK_LOOP);
    254                      
    255                      /* swtich to next state */
    256                      state++;
    257                    }
    258                  }
    259                  break;
    260                  
    261                  /* state of delay for finish power on task */
    262              case POWER_ON_STATE_END:
    263                  /* Close power on task */
    264                  System_CloseTask(SYS_TASK_POWER_ON);
    265                  //Power_SetCurrent(700, SET_MODE_NORMAL);
    266                  break;
    267                  
    268              default: /* error state */
    269                  /* enter infinite loop, wait for watchdog reset MCU */
    270                  while(1);
    271                  break;
    272              }
    273              
    274              return;
    275          }
    276          
    277          
    278          /*******************************************************************************
    279          * @brief  System Power Off Task
    280          * @param  
    281          * @note   
    282          * @retval 
    283          *******************************************************************************/
    284          void System_PowerOffTask(void)
    285          {
    286              /* Check if task has been created */
    287              if( System_CheckTask(SYS_TASK_POWER_OFF) == SYS_TASK_DISABLE )
    288              {
    289                  return;
    290              }
    291              
    292              /* TASK IMPLEMENTATION FROM HERE */
    293              
    294              System_CloseTask(SYS_TASK_POWER_OFF);
    295          }
    296          
    297          
    298          /*******************************************************************************
    299          * @brief  System Sleep Task
    300          * @param  
    301          * @note   
    302          * @retval 
    303          *******************************************************************************/
    304          void System_SleepTask(void)
    305          {
    306              /* Check if task has been created */
    307              if( System_CheckTask(SYS_TASK_SLEEP) == SYS_TASK_DISABLE )
    308              {
    309                  return;
    310              }
    311              
    312              /* MCU clock low speed config*/
    313              MCU_ClockConfigLowSpeed();   
    314              
    315              /* Disable system tick timer */
    316              MCU_SysTickDisable();
    317              
    318              /* Disable PWM module */
    319              PWM_Disable();
    320              
    321              /* Disable ACMP and ERU for detect OVP & OCP */
    322              ACMP_DisableOVP();
    323              ERU_DisableOVP();
    324              
    325              /* Disable ADC */
    326              ADC_Disable();
    327              
    328              /* Disable USART */
    329              USART_Disable(); 
    330              
    331              /* System task controler init */
    332              System_TaskInit();
    333              
    334              /* Software timer init */
    335              SWT_Init();
    336              
    337              /* Simulate I2C init */
    338              I2C_Initial();
    339              
    340              /* Feed watchdog for refresh timer */
    341              WDT_Feeds();
    342              
    343              System_CloseTask(SYS_TASK_SLEEP);
    344          }
    345          
    346          
    347          /*******************************************************************************
    348          * @brief  System Wakeup Task
    349          * @param  
    350          * @note   
    351          * @retval 
    352          *******************************************************************************/
    353          void System_WakeupTask(void)
    354          {
    355              /* Check if task has been created */
    356              if( System_CheckTask(SYS_TASK_WAKEUP) == SYS_TASK_DISABLE )
    357              {
    358                  return;
    359              }
    360              
    361              /* TASK IMPLEMENTATION FROM HERE */
    362              
    363              System_CloseTask(SYS_TASK_WAKEUP);
    364          }
    365          
    366          
    367          /*******************************************************************************
    368          * @brief  System Work Mode Change Task
    369          * @param  
    370          * @note   
    371          * @retval 
    372          *******************************************************************************/
    373          void System_WorkModeChangeTask(void)
    374          {
    375              /* Check if task has been created */
    376              if( System_CheckTask(SYS_TASK_MODE_CHANGE) == SYS_TASK_DISABLE )
    377              {
    378                  return;
    379              }
    380              
    381              /* TASK IMPLEMENTATION FROM HERE */
    382              
    383              System_CloseTask(SYS_TASK_MODE_CHANGE);
    384          }
    385          
    386          
    387          /*******************************************************************************
    388          * @brief  System Period Task Management
    389          * @param  
    390          * @note   Check timing task which are enabled and run the handler when time up
    391          * @retval
    392          *******************************************************************************/
    393          void System_PeriodTaskManagement(void)
    394          {
    395                  //DaliBallast_CyclicTask();
    396              /* Power control loop task period */
    397              if(SWT_CheckTimer(SWT_ID_LOOP) == SWT_STATUS_UP)
    398              {        
    399                  /* Create power control loop task */
    400                  System_CreateTask(SYS_TASK_LOOP); 
    401              }
    402              
    403              /* NFC communication task period */
    404              if(SWT_CheckTimer(SWT_ID_NFC_HANDLE) == SWT_STATUS_UP)
    405              {        
    406                  /* Create nfc communication task */
    407                  System_CreateTask(SYS_TASK_NFC_HANDLE);  
    408              }
    409              
    410              /* Hiccup period timer for OVP and OCP */
    411              if(SWT_CheckTimer(SWT_ID_HICCUP) == SWT_STATUS_UP)
    412              {        
    413                  /* Exit Protection */
    414                  PWM_ExitProtection();
    415              }  
    416              
    417              /* OVP accelerate pin release */
    418              if(SWT_CheckTimer(SWT_ID_SPEED_UP) == SWT_STATUS_UP)
    419              {        
    420                  /* Release control accerlerate pin to avoid lock primary IC */
    421                  PWM_CtrlAccelerateDisable();
    422                  
    423                  SWT_CloseTimer(SWT_ID_SPEED_UP);
    424              }
    425          }
    426          
    427          /**************** (C) COPYRIGHT OSRAM Asia Pacific Management Company *********END OF FILE*********/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   P0_4_set
       0   P1_2_set_mode
       0   P1_3_set_mode
       4   System_CheckTask
       0   System_CloseTask
       0   System_CreateTask
       8   System_PeriodTaskManagement
         8   -> PWM_CtrlAccelerateDisable
         8   -> PWM_ExitProtection
         8   -> SWT_CheckTimer
         8   -> SWT_CloseTimer
         8   -> System_CreateTask
       8   System_PowerOffTask
         8   -> System_CheckTask
         8   -> System_CloseTask
       8   System_PowerOnTask
         8   -> ACMP_EnableLevelEvent_OVP
         8   -> ACMP_EnableOVP
         8   -> ADC_Enable
         8   -> ADC_GetAverage
         8   -> AclInit
         8   -> DaliBallast_Init
         8   -> ERU_EnableOVP
         8   -> MemoryBank_CSM_GetNominalCurrent
         8   -> NfcInit
         8   -> P0_4_set
         8   -> PWM_CtrlAccelerateDisable
         8   -> Power_SetCurrent
         8   -> Power_TaskInit
         8   -> SWT_StartTimer
         8   -> System_CheckTask
         8   -> System_CloseTask
         8   -> System_CreateTask
         8   -> Tick_GetTicks
         8   -> nvmInit
       8   System_SleepTask
         8   -> ACMP_DisableOVP
         8   -> ADC_Disable
         8   -> ERU_DisableOVP
         8   -> MCU_ClockConfigLowSpeed
         8   -> MCU_SysTickDisable
         8   -> P1_2_set_mode
         8   -> P1_3_set_mode
         8   -> PWM_Disable
         8   -> SWT_Init
         8   -> System_CheckTask
         8   -> System_CloseTask
         8   -> System_TaskInit
         8   -> USART_Disable
         8   -> WDT_Feeds
       0   System_TaskInit
       8   System_WakeupTask
         8   -> System_CheckTask
         8   -> System_CloseTask
       8   System_WorkModeChangeTask
         8   -> System_CheckTask
         8   -> System_CloseTask


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
       8  P0_4_set
      28  P1_2_set_mode
      28  P1_3_set_mode
      22  System_CheckTask
      12  System_CloseTask
      12  System_CreateTask
      70  System_PeriodTaskManagement
      20  System_PowerOffTask
     372  System_PowerOnTask
      72  System_SleepTask
       8  System_TaskInit
      20  System_WakeupTask
      20  System_WorkModeChangeTask
       1  g_nfc_ini_flag
       1  g_nfc_tag_read
       4  g_system_task_state
       1  g_work_mode
       1  state
       4  systick

 
  12 bytes in section .bss
 740 bytes in section .text
 
 740 bytes of CODE memory
  12 bytes of DATA memory

Errors: none
Warnings: 4
