// ---------------------------------------------------------------------------------------------------------------------
// Microcontroller Toolbox - Firmware Framework for Full Digital SSL Ballasts
// ---------------------------------------------------------------------------------------------------------------------
// (c) Osram spa
//     Via Castagnole 65/a
//     31100 Treviso (I)
//
//
// The content of this file is intellectual property of OSRAM spa. It is
// confidential and not intended for any public release. All rights reserved.
//
//
// Indent style: Replace tabs by spaces, 2 spaces per indentation level
//
// Initial version: 2014-12, g.marcolin@osram.it
//
// Change History:
//
// $Author$
// $Revision$
// $Date$
// $Id$
// $URL$
//
// ---------------------------------------------------------------------------------------------------------------------

/** \defgroup Crc Cyclic redundancy check
 * \{
 * \brief CRC checksum calculation with hardware support if available
 *
 * \defgroup CrcAPI Crc API
 * \brief CRC module user interface
 *
 * \defgroup CrcDriverAPI Crc Driver API
 * \brief CRC hardware driver interface
 *
 * \defgroup CrcIntern Crc Internals
 * \brief CRC module implementation details
 *
 * \addtogroup CrcAPI
 * \{
 *
 * \file
 * \brief Central functions for CRC handling.
 */

#define MODULE_CRC    ///< \ingroup CrcIntern
#include "Config.h"

#include <string.h>

#include "Global.h"
#include "crc_driver.h"
#include "crc.h"

/** ********************************************************************************************************************
* \ingroup CrcIntern
* \brief Struct for CRC calculation
*
* Only words (4 bytes) can be processed by CRC module. If single bytes are added they are temporarily saved in this
* internal buffer. When the buffer is full, i.e. 4 bytes loaded, the CRC is calculated with the new word.
***********************************************************************************************************************/

typedef struct
{
	uint32_t byteCnt;

	union
	{
		uint8_t buf[4];
		uint32_t word;
	};
}
crc_t;

/** ********************************************************************************************************************
* \brief Data for CRC calculation
*
***********************************************************************************************************************/

static crc_t crc;

/** ********************************************************************************************************************
* \brief CRC module init
*
* \note CRC-32 (Ethernet) polynomial: 0x4C11DB7.
*
* \warning It must be called once during initialization before any CRC API.
***********************************************************************************************************************/

void crcInit( void )
{
    crc_drv_init();

    memset(&crc, 0, sizeof(crc_t));
}

/** ********************************************************************************************************************
* \brief Resets CRC to 0xFFFFFFFF
*
* \note There is a single instance of CRC therefore any application that needs a CRC calculation must first
*       reset CRC.
***********************************************************************************************************************/

void crcReset( void )
{
    crc_drv_reset();

    memset(&crc, 0, sizeof(crc_t));
}

/** ********************************************************************************************************************
* \brief Resets CRC and calculates the buffer CRC
*
*  If buffer size is not multiple of 4 the remaining bytes are filled with zeros.
*
* \param pdata
*        Pointer to data buffer
*
* \param sizeByte
*        Number of bytes of the buffer over which CRC is calculated
*
* \retval CRC
***********************************************************************************************************************/

uint32_t crcCalcBuf( const void *pdata, uint32_t sizeByte )
{
    const uint8_t *p8;
    const uint32_t *p32;
    uint32_t byte_cnt;

    crc_drv_reset();

    p32 = pdata;
    byte_cnt = sizeByte;

    while(byte_cnt > 3)                             // Load words
    {
        crc_drv_calc(*p32);
        p32++;
        byte_cnt -= 4;
    }

    p8 = (uint8_t *)p32;

    while(byte_cnt)                                 // Load remaining bytes
    {
        crcLoadByte(*p8);
        p8++;
        byte_cnt--;
    }

    return crcGet();
}

/** ********************************************************************************************************************
* \brief Loads a word to the actual CRC
*
*  The word (4 bytes) is loaded into the internal buffer and CRC immediately updated.
*
* \param value
*        Word to add
***********************************************************************************************************************/

void crcLoadWord( uint32_t value )
{
    uint32_t i = 0;
    uint8_t *p;

    p = (uint8_t *)&value;

    while(i < 4)
    {
        crc.buf[crc.byteCnt] = *p;

        if(++crc.byteCnt == 4)
        {
            crc_drv_calc(crc.word);
            crc.word = 0;
            crc.byteCnt = 0;
        }

        p++;
        i++;
    }
}

/** ********************************************************************************************************************
* \brief Loads a byte into the temporary internal CRC buffer
*
* \note When the internal buffer has four bytes loaded the CRC is updated.
*
* \param value
*        Word to be added
***********************************************************************************************************************/

void crcLoadByte( uint8_t value )
{
    crc.buf[crc.byteCnt] = value;

    if(++crc.byteCnt == 4)
    {
        crc_drv_calc(crc.word);
        crc.word = 0;
        crc.byteCnt = 0;
    }
}

/** ********************************************************************************************************************
* \brief Getd CRC after loading remaining data saved on internal buffer
*
* \retval CRC
***********************************************************************************************************************/

uint32_t crcGet( void )
{
    if(crc.byteCnt)
    {
        crc_drv_calc(crc.word);                 // Compute CRC with data in buffer and reset crc struct
        crc.word = 0;
        crc.byteCnt = 0;
    }

    return crc_drv_get();
}

/**********************************************************************************************************************/

/** \} */ // CrcAPI
/** \} */ // Crc

