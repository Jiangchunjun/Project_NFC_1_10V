// ---------------------------------------------------------------------------------------------------------------------
// nfc_config.c
// ---------------------------------------------------------------------------------------------------------------------
// (c) Osram GmbH
// Development Electronics for SSL
// Parkring 33
// 85748 Garching
//
// The content of this file is intellectual property of OSRAM GmbH. It is
// confidential and not intended for any public release. All rights reserved.
//
// Indent style: Replace tabs by spaces, 4 spaces per indentation level
//
// Initial version: Sammy el Baradie,  27/07/2016
//
// $Author$
// $Revision$
// $Date$
// $Id$
// $URL$
//
// ---------------------------------------------------------------------------------------------------------------------


#include <assert.h>   // system libs first

#define MODULE_NFC
#include "Global.h"
#include "Config.h"
#include "ErrorHandler.h"
#include "Acl.h"
#include "Mpc.h"
#include "MpcInternal.h"
#include "MpcAllocation.h"

#include "Nfc.h"
#include "nfc_config.h"
#include "nfc_local.h"
#include "nfc_parameters.h"


/** \file
 * \brief Define device specific parameters for Device Identification Registers
 *        and TOC. Create NFC tag start addresses for each MPC instance.
 */

//-----------------------------------------------------------------------------
// constants
//-----------------------------------------------------------------------------

/** NFC_TAG_COPY_BYTE_SIZE is calculated by the formula:
 * \b NFC_TAG_COPY_BYTE_SIZE =
 *     (last MPC start address in tag + payload + 2)
 *     - nfc_tag_addr_config.first_mpc_start_addr
 *     - +2 is required for the 16 bit CRC
 *  This define is located in ConfigNfc.h to allow adaptions in the project!
 */

// Define standard parameters fitting to several platforms
#ifdef NFC_CONFIG_STD1
  #define NFC_FIRST_MPC_START_ADDR                  172
  #define NFC_STATUS_REGISTER_START_ADDR            252
  #define NFC_CONTROL_REGISTER_START_ADDR           256
  #define NFC_PROTECTED_MEMORY_START_ADDR          1024 // sector 8
#endif


//-----------------------------------------------------------------------------
/**
 * array of special NFC TAG addresses
 *
 * \note this array should be filled automatically by a tool
 */
const nfc_tag_addr_config_t nfc_tag_addr_config =
{
   .first_mpc_start_addr        = NFC_FIRST_MPC_START_ADDR,
   .status_register_start_addr  = NFC_STATUS_REGISTER_START_ADDR,
   .control_register_start_addr = NFC_CONTROL_REGISTER_START_ADDR,
   .protected_memory_start_addr = NFC_PROTECTED_MEMORY_START_ADDR
};


//------------------------------------------------------------------------------
// global variables
//------------------------------------------------------------------------------

/**
 * NFC TAG Copy Memory
 * externally defined to minimize ram size if NFC is part of a library
 */
uint8_t nfc_tag_copy[];

/**
 * pointer to externally declared NFC tag start address array
 * used in this file to assign a defined array length
 */
uint16_t * NfcMpcTagStartAddr;

/**
 * pointer to TOC items array
 * used in this file to assign a defined array length
 */
toc_item_t * toc_items;


#ifdef NFC_TAG_COPY_BYTE_SIZE
   uint8_t  nfc_tag_copy[NFC_TAG_COPY_BYTE_SIZE];
#else
  STATIC_ASSERT(0,  "Parameter NFC_TAG_COPY_BYTE_SIZE is not defined. Please ensure that your project\n"
                    " - either defines an appropriate platform, which comes along with this parameter\n"
                    " - or has a ConfigNfc.h (normally included by Config.h) defining this parameter\n"
                    " - or has this definition somewhere else.");
#endif



// -----------------------------------------------------------------------------
/**
* \brief
* - MPC_COUNT corresponds to the number of implemented MPCs and
*   is defined in MpcDefaultConfiguration.h
* - MPC_NFC_INST enumerates MPC_COUNT with all its instances
* - For single channel devices, MPC_NFC_INST equals MPC_COUNT
*/

//------------------------------------------------------------------------------
/**
 * \brief define array with defined length for assignment to NfcMpcTagStartAddr
*/
uint16_t nfc_p[MPC_NFC_INST];


/**
 * \brief define array with defined length for assignment to toc_items
*/
toc_item_t toc_p[MPC_NFC_INST];


//------------------------------------------------------------------------------
// global functions
//------------------------------------------------------------------------------
/**
 * Return NFC tag copy memory size
 *
 * Normally this parameter is not needed anywhere except here. Therefore,
 * this function should not be used/linked in production code.
 *
 * Nevertheless add this function for test purposes to provide the authoritative
 * answer about this parameter also in case of config file issues.
 */
uint16_t nfc_tag_copy_size ( void )
{
  return NFC_TAG_COPY_BYTE_SIZE;
}



// -----------------------------------------------------------------------------
/**
 * \brief initialize arrays NfcMpcTagStartAddr[] and toc_items[]
 * \note The function is needed to allow different values in unit tests for
 * MPC_COUNT and MPC_NFC_INST
 * - assign pointers with defined lengths in project firmware
 * - assign pointers with changeable lengths in unit tests
 * \param length: Needed for unit tests to assign dynamic array lengths
 */
void nfc_init_arrays ( uint8_t length )
{
    NfcMpcTagStartAddr = nfc_p;
    toc_items = toc_p;
}


